{
 "nbformat": 4,
 "nbformat_minor": 2,
 "metadata": {
  "language_info": {
   "name": "python",
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "version": "3.8.2-final"
  },
  "orig_nbformat": 2,
  "file_extension": ".py",
  "mimetype": "text/x-python",
  "name": "python",
  "npconvert_exporter": "python",
  "pygments_lexer": "ipython3",
  "version": 3,
  "kernelspec": {
   "name": "python38264bitvenvvenv4ca732631696488eb4cbf0e4a63b9d3b",
   "display_name": "Python 3.8.2 64-bit ('venv': venv)"
  }
 },
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Wariant 2\n",
    "Stwórz program/skrypt który\n",
    "* pobierze dane o postach z ​https://jsonplaceholder.typicode.com/posts​ ​i połączy je z danymi o\n",
    "userach ​https://jsonplaceholder.typicode.com/users\n",
    "* policzy ile postów napisali userzy i zwróci listę stringów w postaci “​user_name napisał(a) ​count \n",
    "postów”\n",
    "* sprawdzi czy tytuły postów są unikalne i zwróci listę tytułów które nie są.\n",
    "* dla każdego użytkownika znajdzie innego użytkownika, który mieszka najbliżej niego\n",
    "\n",
    "Pożądanym elementem danego rozwiązania jest także zestaw testów sprawdzających jego poprawność."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": "{'userId': 1,\n 'id': 1,\n 'title': 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit',\n 'body': 'quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto'}"
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Wczytywanie danych\n",
    "import requests\n",
    "\n",
    "reqUsers = requests.get(\"https://jsonplaceholder.typicode.com/users\")\n",
    "reqPosts = requests.get(\"https://jsonplaceholder.typicode.com/posts\")\n",
    "if [reqUsers.status_code, reqPosts.status_code] != [200, 200]: \n",
    "    raise Exception(\"Error: couldn't retrieve data from the server\")\n",
    "\n",
    "posts = reqPosts.json()\n",
    "users = reqUsers.json()\n",
    "posts[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": "{'userId': 1,\n 'id': 2,\n 'title': 'qui est esse',\n 'body': 'est rerum tempore vitae\\nsequi sint nihil reprehenderit dolor beatae ea dolores neque\\nfugiat blanditiis voluptate porro vel nihil molestiae ut reiciendis\\nqui aperiam non debitis possimus qui neque nisi nulla',\n 'name': 'Leanne Graham',\n 'username': 'Bret',\n 'email': 'Sincere@april.biz',\n 'address': {'street': 'Kulas Light',\n  'suite': 'Apt. 556',\n  'city': 'Gwenborough',\n  'zipcode': '92998-3874',\n  'geo': {'lat': '-37.3159', 'lng': '81.1496'}},\n 'phone': '1-770-736-8031 x56442',\n 'website': 'hildegard.org',\n 'company': {'name': 'Romaguera-Crona',\n  'catchPhrase': 'Multi-layered client-server neural-net',\n  'bs': 'harness real-time e-markets'}}"
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Laczenie uzytkownikow z postami na podstawie klucza \"userId\"\n",
    "def merge_lists(posts, users, joinKey):\n",
    "    mergedLists = posts\n",
    "    for i in range(len(posts)):\n",
    "        for j in range(len(users)):\n",
    "            if posts[i][joinKey] == users[j]['id']:\n",
    "                for key in users[j].keys():\n",
    "                    if key != \"id\":\n",
    "                        mergedLists[i][key] = users[j][key]\n",
    "    return mergedLists\n",
    "\n",
    "userPosts = merge_lists(posts, users, \"userId\")\n",
    "userPosts[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": "Bret napisał(a) 10 postów\nAntonette napisał(a) 10 postów\nSamantha napisał(a) 10 postów\nKarianne napisał(a) 10 postów\nKamren napisał(a) 10 postów\nLeopoldo_Corkery napisał(a) 10 postów\nElwyn.Skiles napisał(a) 10 postów\nMaxime_Nienow napisał(a) 10 postów\nDelphine napisał(a) 10 postów\nMoriah.Stanton napisał(a) 10 postów\n"
    }
   ],
   "source": [
    "def countPostsPerUser(userPosts):\n",
    "    ids = {}\n",
    "    for i in range(len(userPosts)):\n",
    "        if userPosts[i][\"userId\"] not in ids:\n",
    "            ids[userPosts[i][\"userId\"]] = [1, userPosts[i][\"username\"]]\n",
    "        else:\n",
    "            ids[userPosts[i][\"userId\"]][0]+=1\n",
    "\n",
    "    return ids\n",
    "\n",
    "\n",
    "postsPerUser = countPostsPerUser(userPosts)\n",
    "for key in postsPerUser.keys():\n",
    "    print(\"{0} napisał(a) {1} postów\".format(postsPerUser[key][1], postsPerUser[key][0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": "[]"
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from collections import Counter\n",
    "\n",
    "def getPostTitles(posts):\n",
    "    titles = []\n",
    "    for i in range(len(posts)):\n",
    "        titles.append(posts[i]['title'])\n",
    "    return titles\n",
    "\n",
    "titles = getPostTitles(posts)\n",
    "[key for (key,value) in Counter(titles).items() if value > 1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": "{0: [0.0, 8920.034455771924, 7508.843378161358, 13992.33684322624, 1810.3222631439153, 3834.522771623129, 9264.13307901301, 13840.59994593122, 13337.925531180917, 2104.4783053268516], 1: [8920.034455771924, 0.0, 2841.1566568831986, 15340.28444071682, 8142.13172853824, 5974.006424850167, 9542.686421141083, 8620.58005010442, 15386.185293115774, 7313.858771718971], 2: [7508.843378161358, 2841.1566568831986, 0.0, 14118.196259298, 7492.547056194283, 3824.068457458777, 11749.116646207225, 7862.997002422526, 13805.769058098904, 6647.188469398004], 3: [13992.33684322624, 15340.28444071682, 14118.196259298, 0.0, 15564.958285124749, 14261.98119449632, 13953.894404606366, 6738.0697783748055, 700.9122399238803, 16095.18723271311], 4: [1810.3222631439153, 8142.13172853824, 7492.547056194283, 15564.958285124749, 0.0, 4441.258100912202, 7618.822773137622, 14878.339345958926, 14964.695729147401, 861.6505388053678], 5: [3834.522771623129, 5974.006424850167, 3824.068457458777, 14261.98119449632, 4441.258100912202, 0.0, 11348.390060554837, 10437.095909499656, 13607.613726360201, 3785.9830263128797], 6: [9264.13307901301, 9542.686421141083, 11749.116646207225, 13953.894404606366, 7618.822773137622, 11348.390060554837, 0.0, 15961.725505319211, 14402.392496483275, 7901.447709331725], 7: [13840.59994593122, 8620.58005010442, 7862.997002422526, 6738.0697783748055, 14878.339345958926, 10437.095909499656, 15961.725505319211, 0.0, 6779.787845104183, 14173.719764397036], 8: [13337.925531180917, 15386.185293115774, 13805.769058098904, 700.9122399238803, 14964.695729147401, 13607.613726360201, 14402.392496483275, 6779.787845104183, 0.0, 15442.147433611546], 9: [2104.4783053268516, 7313.858771718971, 6647.188469398004, 16095.18723271311, 861.6505388053678, 3785.9830263128797, 7901.447709331725, 14173.719764397036, 15442.147433611546, 0.0]}\n{0: [4, 1810.3222631439153], 1: [2, 2841.1566568831986], 2: [1, 2841.1566568831986], 3: [8, 700.9122399238803], 4: [9, 861.6505388053678], 5: [9, 3785.9830263128797], 6: [4, 7618.822773137622], 7: [3, 6738.0697783748055], 8: [3, 700.9122399238803], 9: [4, 861.6505388053678]}\n"
    }
   ],
   "source": [
    "import geopy.distance\n",
    "\n",
    "def calculateDistances(users):\n",
    "    neighbours = {}\n",
    "    rng = range(len(users))\n",
    "    for i in rng:\n",
    "        tempDistance = 0\n",
    "        neighbours[i] = []\n",
    "        # GEO1 = LATITUDE, LONGTITUDE\n",
    "        geo1 = (users[i]['address']['geo']['lat'], users[i]['address']['geo']['lng'])\n",
    "        for j in rng:\n",
    "            geo2 = (users[j]['address']['geo']['lat'], users[j]['address']['geo']['lng'])\n",
    "            distance = geopy.distance.distance(geo1, geo2).km\n",
    "            neighbours[i].append(distance)\n",
    "    return neighbours\n",
    "        \n",
    "\n",
    "def findNearestNeighbours(usersDistances):\n",
    "    for key,value in usersDistances.items():\n",
    "        nearest = min(i for i in value if i > 0)\n",
    "        usersDistances[key] = [value.index(nearest), nearest]\n",
    "    return usersDistances\n",
    "\n",
    "usersDistances = calculateDistances(users)\n",
    "nearestNeighbours = findNearestNeighbours(usersDistances)\n",
    "print(calculateDistances(users))\n",
    "print(nearestNeighbours)"
   ]
  }
 ]
}