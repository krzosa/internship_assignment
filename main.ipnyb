{
 "nbformat": 4,
 "nbformat_minor": 2,
 "metadata": {
  "language_info": {
   "name": "python",
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "version": "3.8.2-final"
  },
  "orig_nbformat": 2,
  "file_extension": ".py",
  "mimetype": "text/x-python",
  "name": "python",
  "npconvert_exporter": "python",
  "pygments_lexer": "ipython3",
  "version": 3,
  "kernelspec": {
   "name": "python38264bitvenvvenv4ca732631696488eb4cbf0e4a63b9d3b",
   "display_name": "Python 3.8.2 64-bit ('venv': venv)"
  }
 },
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Wariant 2\n",
    "Stwórz program/skrypt który\n",
    "* pobierze dane o postach z ​https://jsonplaceholder.typicode.com/posts​ ​i połączy je z danymi o\n",
    "userach ​https://jsonplaceholder.typicode.com/users\n",
    "* policzy ile postów napisali userzy i zwróci listę stringów w postaci “​user_name napisał(a) ​count \n",
    "postów”\n",
    "* sprawdzi czy tytuły postów są unikalne i zwróci listę tytułów które nie są.\n",
    "* dla każdego użytkownika znajdzie innego użytkownika, który mieszka najbliżej niego\n",
    "\n",
    "Pożądanym elementem danego rozwiązania jest także zestaw testów sprawdzających jego poprawność."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": "{'userId': 1,\n 'id': 1,\n 'title': 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit',\n 'body': 'quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto'}"
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Wczytywanie danych\n",
    "import requests\n",
    "\n",
    "reqUsers = requests.get(\"https://jsonplaceholder.typicode.com/users\")\n",
    "reqPosts = requests.get(\"https://jsonplaceholder.typicode.com/posts\")\n",
    "if [reqUsers.status_code, reqPosts.status_code] != [200, 200]: \n",
    "    raise Exception(\"Error: couldn't retrieve data from the server\")\n",
    "\n",
    "posts = reqPosts.json()\n",
    "users = reqUsers.json()\n",
    "posts[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": "{'userId': 1,\n 'id': 2,\n 'title': 'qui est esse',\n 'body': 'est rerum tempore vitae\\nsequi sint nihil reprehenderit dolor beatae ea dolores neque\\nfugiat blanditiis voluptate porro vel nihil molestiae ut reiciendis\\nqui aperiam non debitis possimus qui neque nisi nulla',\n 'name': 'Leanne Graham',\n 'username': 'Bret',\n 'email': 'Sincere@april.biz',\n 'address': {'street': 'Kulas Light',\n  'suite': 'Apt. 556',\n  'city': 'Gwenborough',\n  'zipcode': '92998-3874',\n  'geo': {'lat': '-37.3159', 'lng': '81.1496'}},\n 'phone': '1-770-736-8031 x56442',\n 'website': 'hildegard.org',\n 'company': {'name': 'Romaguera-Crona',\n  'catchPhrase': 'Multi-layered client-server neural-net',\n  'bs': 'harness real-time e-markets'}}"
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Laczenie uzytkownikow z postami na podstawie klucza \"userId\"\n",
    "def merge_lists(posts, users, joinKey):\n",
    "    mergedLists = posts\n",
    "    for i in range(len(posts)):\n",
    "        for j in range(len(users)):\n",
    "            if posts[i][joinKey] == users[j]['id']:\n",
    "                for key in users[j].keys():\n",
    "                    if key != \"id\":\n",
    "                        mergedLists[i][key] = users[j][key]\n",
    "    return mergedLists\n",
    "\n",
    "userPosts = merge_lists(posts, users, \"userId\")\n",
    "userPosts[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": "Bret napisał(a) 10 postów\nAntonette napisał(a) 10 postów\nSamantha napisał(a) 10 postów\nKarianne napisał(a) 10 postów\nKamren napisał(a) 10 postów\nLeopoldo_Corkery napisał(a) 10 postów\nElwyn.Skiles napisał(a) 10 postów\nMaxime_Nienow napisał(a) 10 postów\nDelphine napisał(a) 10 postów\nMoriah.Stanton napisał(a) 10 postów\n"
    },
    {
     "data": {
      "text/plain": "{1: [10, 'Bret'],\n 2: [10, 'Antonette'],\n 3: [10, 'Samantha'],\n 4: [10, 'Karianne'],\n 5: [10, 'Kamren'],\n 6: [10, 'Leopoldo_Corkery'],\n 7: [10, 'Elwyn.Skiles'],\n 8: [10, 'Maxime_Nienow'],\n 9: [10, 'Delphine'],\n 10: [10, 'Moriah.Stanton']}"
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def countPostsPerUser(userPosts):\n",
    "    ids = {}\n",
    "    for i in range(len(userPosts)):\n",
    "        if userPosts[i][\"userId\"] not in ids:\n",
    "            ids[userPosts[i][\"userId\"]] = [1, userPosts[i][\"username\"]]\n",
    "        else:\n",
    "            ids[userPosts[i][\"userId\"]][0]+=1\n",
    "\n",
    "    return ids\n",
    "\n",
    "\n",
    "postsPerUser = countPostsPerUser(userPosts)\n",
    "for key in postsPerUser.keys():\n",
    "    print(\"{0} napisał(a) {1} postów\".format(postsPerUser[key][1], postsPerUser[key][0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": "[]"
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from collections import Counter\n",
    "\n",
    "def getPostTitles(posts):\n",
    "    titles = []\n",
    "    for i in range(len(posts)):\n",
    "        titles.append(posts[i]['title'])\n",
    "    return titles\n",
    "\n",
    "titles = getPostTitles(posts)\n",
    "[key for (key,value) in Counter(titles).items() if value > 1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": "{0: 3, 1: 8, 2: 3, 3: 9, 4: 3, 5: 3, 6: 7, 7: 6, 8: 9, 9: 3}"
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import geopy.distance\n",
    "\n",
    "def findNeighbours(users):\n",
    "    neighbours = {}\n",
    "    rng = range(len(users))\n",
    "    for i in rng:\n",
    "        tempDistance = 0\n",
    "        # GEO1 = LATITUDE, LONGTITUDE\n",
    "        geo1 = (users[i]['address']['geo']['lat'], users[i]['address']['geo']['lng'])\n",
    "        for j in rng:\n",
    "            geo2 = (users[j]['address']['geo']['lat'], users[j]['address']['geo']['lng'])\n",
    "            distance = geopy.distance.distance(geo1, geo2).km\n",
    "            if distance > tempDistance:\n",
    "                tempDistance = distance \n",
    "                neighbours[i] = j\n",
    "    return neighbours\n",
    "        \n",
    "\n",
    "\n",
    "findNeighbours(users)\n",
    "# geopy.distance.distance(coords_1, coords_2).km"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": "tuple"
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type((users[1]['address']['geo']['lat'], users[1]['address']['geo']['lng']))"
   ]
  }
 ]
}